package nel.marco;

import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.


What is the value of the first triangle number to have over five hundred divisors?

answer = 76576500

completed in [took=69s] -> 4 threads
completed in [took=36s] -> 8 threads
completed in [took=26s] -> 16 threads
completed in [took=25s] -> 18 threads
completed in [took=24s] -> 32 threads

 */
public class Problem12 {

    ExecutorService executorService = Executors.newFixedThreadPool(16);


    public static void main(String args[]) {
        try {
            new Problem12();
        } catch (ExecutionException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    public Problem12() throws ExecutionException, InterruptedException {

        //<number , amountOfDivisor>
        Map<Long, Long> map = new HashMap<>();

        long total = 0;
        for (long x = 1; x <= 100000; x++) {
            total += x;
            if (total % 2 == 0)
                map.put(x, total);
        }

        Instant before = Instant.now();
        for (Map.Entry<Long, Long> entry : map.entrySet()) {
            Long tempTotal = entry.getValue();
            executorService.submit(() -> getValidDivisor(tempTotal, before));
        }


        executorService.shutdown();


    }

    private List<Long> getValidDivisor(long totalFinal, Instant before) {
        List<Long> validDivisor = new ArrayList<>();
        for (long j = 2; j <= totalFinal / 2 + 1; j++) {
            if (totalFinal % j == 0)
                validDivisor.add(j);
        }
        validDivisor.add(1L);
        validDivisor.add(totalFinal);

        if (validDivisor.size() >= 500) {
            System.out.println("total = " + totalFinal);
            System.out.printf("completed in [took=%ss]", Duration.between(before, Instant.now()).toSeconds());
            System.exit(0);
        }
        return validDivisor;
    }

}
